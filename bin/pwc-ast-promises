#!/usr/local/bin/raku
## trivially modified from RC version
#  2022-03-14
#    needs explicit '$fh.close' or doesn't flush the print buffer, truncates AST
#    concurrency/async boiler-plate from manual
#    add timings, variable time-out, to aid in fine-tuning 'big lists' vs 'infinite lists'

shell 'rm -f tmp/ast/*';

for '100'..'155' -> $dir {
    for run('find', $dir, :out).out.lines -> $path {
        next if 1 == $path.chars;
        my $file = $path.subst(/^.*\//, '');
        next unless $file ~~ /\. raku $/;
        #next if $file ~~ / ?? /; # rapidly consume all memory
        my $t = now;
        gen-ast $path, $file, 60;
        printf "%5.1f %s\n", now - $t, $path;
        sleep 5;
    }
}

sub gen-ast ($path, $file, $time-out) {
 
    my $proc = Proc::Async.new('/usr/local/bin/raku', '--target=ast', $path);
    my $dest = $path.subst('/', '_', :g);
    my $fh = "tmp/ast/$dest".IO.open :w;
    $proc.stdout.tap(-> $v { $fh.print: $v });

    my $result = await Promise.anyof(
        my $promise = $proc.start,
        Promise.in($time-out).then: {
            unless $promise {
                note "timeout on $file";
                $proc.kill;
             }
        }
    ).then: { $promise.result }
    $fh.close;
}
