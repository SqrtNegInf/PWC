 
===> 039/2/arne-sommer.raku <===
: - Add to stack: 15
: Stack: 15
: - Add to stack: 7
: Stack: 15, 7
: - Add to stack: 1
: Stack: 15, 7, 1
: - Add to stack: 1
: Stack: 15, 7, 1, 1
: Operator: +
: - Stack: 15, 7
: - Values: 1 1
: - Result: 2
: - Add to stack: 2
: Stack: 15, 7, 2
: Operator: -
: - Stack: 15
: - Values: 7 2
: - Result: 5
: - Add to stack: 5
: Stack: 15, 5
: Operator: /
: - Stack: 
: - Values: 15 5
: - Result: 3
: - Add to stack: 3
: Stack: 3
: - Add to stack: 3
: Stack: 3, 3
: Operator: *
: - Stack: 
: - Values: 3 3
: - Result: 9
: - Add to stack: 9
: Stack: 9
: - Add to stack: 2
: Stack: 9, 2
: - Add to stack: 1
: Stack: 9, 2, 1
: - Add to stack: 1
: Stack: 9, 2, 1, 1
: Operator: +
: - Stack: 9, 2
: - Values: 1 1
: - Result: 2
: - Add to stack: 2
: Stack: 9, 2, 2
: Operator: +
: - Stack: 9
: - Values: 2 2
: - Result: 4
: - Add to stack: 4
: Stack: 9, 4
: Operator: -
: - Stack: 
: - Values: 9 4
: - Result: 5
: - Add to stack: 5
: Stack: 5
 
===> 039/2/javier-luque.raku <===
5
 
===> 039/2/kevin-colyer.raku <===
Postfix expression to evaluate: [15 7 1 1 + − ÷ 3 × 2 1 1 + + −]
! found token operand
 pushed 15 into stack [15]
! found token operand
 pushed 7 into stack [15 7]
! found token operand
 pushed 1 into stack [15 7 1]
! found token operand
 pushed 1 into stack [15 7 1 1]
! found token operator
 popped 1
 popped 1
  evaluating 1 and 1 with + result = 2
 pushed 2 into stack [15 7 2]
! found token operator
 popped 2
 popped 7
  evaluating 7 and 2 with − result = 5
 pushed 5 into stack [15 5]
! found token operator
 popped 5
 popped 15
  evaluating 15 and 5 with ÷ result = 3
 pushed 3 into stack [3]
! found token operand
 pushed 3 into stack [3 3]
! found token operator
 popped 3
 popped 3
  evaluating 3 and 3 with × result = 9
 pushed 9 into stack [9]
! found token operand
 pushed 2 into stack [9 2]
! found token operand
 pushed 1 into stack [9 2 1]
! found token operand
 pushed 1 into stack [9 2 1 1]
! found token operator
 popped 1
 popped 1
  evaluating 1 and 1 with + result = 2
 pushed 2 into stack [9 2 2]
! found token operator
 popped 2
 popped 2
  evaluating 2 and 2 with + result = 4
 pushed 4 into stack [9 4]
! found token operator
 popped 4
 popped 9
  evaluating 9 and 4 with − result = 5
 pushed 5 into stack [5]
! end of input
 popping 5 and returning...

ok 1 - Wikipedia example
 
===> 039/2/laurent-rosenfeld.raku <===
1..5
ok 1 - 2 operands
ok 2 - 3 operands, a Unicode multiplication operator
ok 3 - 5 operands
ok 4 - Start with 3 operands and then two operators
ok 5 - 8 operands, 4 Unicode operators
 
===> 039/2/noud.raku <===
1 2 3 + + 5 + 11 =
15 7 1 1 + - / 3 * 2 1 1 + + - 5 =
7 6 * 7 % 0 =
 
===> 039/2/roger-bell-west.raku <===
15
15 7
15 7 1
15 7 1 1
15 7 2
15 5
3
3 3
9
9 2
9 2 1
9 2 1 1
9 2 2
9 4
5
 
===> 039/2/ruben-westerberg.raku <===
Input expression: 15 7 1 1 + - / 3 * 2 1 1 + + -
Result: 5
 
===> 039/2/ryan-thompson.raku <===
 
===> 039/2/stuart-little.raku <===
(5)
 
===> 039/2/ulrich-rieke.raku <===
3 2 *
