#!/usr/bin/env raku

###############################################################################
=begin comment

Perl Weekly Challenge 150
=========================

TASK #1
-------
*Fibonacci Words*

Submitted by: Mohammad S Anwar

You are given two strings having same number of digits, $a and $b.

Write a script to generate Fibonacci Words by concatenation of the previous two
strings. Finally print 51st digit of the first term having at least 51 digits.

Example:

    Input: $a = '1234' $b = '5678'
    Output: 7

    Fibonacci Words:

    '1234'
    '5678'
    '12345678'
    '567812345678'
    '12345678567812345678'
    '56781234567812345678567812345678'
    '1234567856781234567856781234567812345678567812345678'

    The 51st digit in the first term having at least 51 digits
    '1234567856781234567856781234567812345678567812345678' is 7.

=end comment
###############################################################################

#--------------------------------------#
# Copyright Â© 2022 PerlMonk Athanasius #
#--------------------------------------#

#==============================================================================
=begin comment

Algorithm
---------
As with the standard Fibonacci sequence, each term is generated by combining
the two immediately-preceding terms. In this case, "combining" is done by con-
catenation rather than addition.

Extensions
----------
I have extended the Task in two ways:

(1) An explanation of the answer is provided in the form given in the Example.
    The required digit is highlighted in-place in the final Fibonacci word by a
    caret symbol directly below. (The explanation may be suppressed by setting
    the constant $VERBOSE to False.)

(2) The constant $TARGET may be set to any integer value greater than 1, and
    the output will still be correct.

=end comment
#==============================================================================

my UInt constant $TARGET  = 51;
my Bool constant $VERBOSE = False;

#------------------------------------------------------------------------------
BEGIN
#------------------------------------------------------------------------------
{
    "\nChallenge 150, Task #1: Fibonacci Words (Raku)\n".put;
}

#==============================================================================
sub MAIN
(
#    Str:D $a where   / ^ \d+ $ /,                #= A string of digits
#    Str:D $b where { / ^ \d+ $ / &&              #= Another string of digits of
#                     $b.chars == $a.chars }      #= the same length
)
#==============================================================================
{
    my ($a, $b) = ('1234', '5678');
    "Input:  \$a = '$a' \$b = '$b'".put;

    my UInt $length = $a.chars;
    my Str ($x, $y) = $a, $b;
    my Str  @words  = $a, $b        if $VERBOSE;

    while $length < $TARGET
    {
        my Str $z = $x ~ $y;
        $x        = $y;
        $y        = $z;
        $length   = $y.chars;

        @words.push: $y             if $VERBOSE;
    }

    my Str  $fib   = $TARGET > $a.chars ?? $y !! $a;
    my UInt $digit = $fib.substr( $TARGET - 1, 1 ).Int;

    "Output: $digit".put;

    explain( $fib, $digit, @words ) if $VERBOSE;
}

#------------------------------------------------------------------------------
sub explain( Str:D $fib, UInt $digit, Array:D[Str:D] $words )
#------------------------------------------------------------------------------
{
    "\nFibonacci Words:\n".put;

    "'$_'".put for @$words;

    "\nThe %s digit in the first term having at least %d digits\n".printf:
        ordinal( $TARGET ), $TARGET;

    "'%s' is %d\n%s^\n".printf: $fib, $digit, ' ' x $TARGET;
}

#------------------------------------------------------------------------------
sub ordinal( UInt:D $num where * > 0 --> Str:D )
#------------------------------------------------------------------------------
{
    my Str  $suff = 'th';
    my UInt $dig1 = (($num % 100) / 10).floor;          # Tens digit

    if $dig1 != 1
    {
        my UInt $dig0 = $num % 10;                      # Ones digit

        $suff = $dig0 == 1 ?? 'st' !!
                $dig0 == 2 ?? 'nd' !!
                $dig0 == 3 ?? 'rd' !! 'th';
    }

    return $num ~ $suff;
}

#------------------------------------------------------------------------------
sub USAGE()
#------------------------------------------------------------------------------
{
    my Str $usage = $*USAGE;

    $usage ~~ s/ ($*PROGRAM-NAME) /raku $0/;

    $usage.put;
}

##############################################################################
